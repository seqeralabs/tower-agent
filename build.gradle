/*
 * Copyright (c) 2021, Seqera Labs.
 *
 *  This Source Code Form is subject to the terms of the Mozilla Public
 *  License, v. 2.0. If a copy of the MPL was not distributed with this
 *  file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *  This Source Code Form is "Incompatible With Secondary Licenses", as
 *  defined by the Mozilla Public License, v. 2.0.
 */

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'org.graalvm.buildtools.native'
    id("io.micronaut.application") version "4.4.2"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.file('VERSION').text.strip()
group = "io.seqera.tower.agent"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.seqera.tower.agent.*")
    }
}

def junitVersion = providers.gradleProperty('junit.jupiter.version')
        .forUseAtConfigurationTime()
        .get()

dependencies {
    annotationProcessor("info.picocli:picocli-codegen")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-graal")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-client")
    implementation("info.picocli:picocli")
    implementation("javax.annotation:javax.annotation-api")
    implementation("javax.inject:javax.inject:1")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")
    compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut:micronaut-jackson-databind")

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

license {
    header = project.file('HEADER.txt')
    properties {
        name = 'Seqera'
        year = '2021-2024'
    }
    exclude '**/*.properties'
    exclude 'gradlew'
}

application {
    mainClass.set("io.seqera.tower.agent.Agent")
}

task buildInfo {
    doLast {
        def version = rootProject.file('VERSION').text.trim()
        def versionApi = rootProject.file('VERSION-API').text.trim()
        def commitId = System.env.getOrDefault("GITHUB_SHA", "unknown").substring(0,7)
        def info = """\
                    version=${version}
                    versionApi=${versionApi}
                    commitId=${commitId}
                """.stripIndent().toString()
        def f = file("src/main/resources/META-INF/build-info.properties")
        f.parentFile.mkdirs()
        f.text = info
    }
}

compileJava {
    options.release.set(17)
    sourceCompatibility = '21'
    targetCompatibility = '21'
    options.compilerArgs += ["-Aproject=${project.name}"]
    dependsOn buildInfo
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

shadowJar {
    archiveBaseName.set('tw-agent')
    archiveClassifier.set('')
    archiveVersion.set('')
}

test {
    useJUnitPlatform()
    dependsOn checkLicenses
}


graalvmNative {
    binaries {
        main {
            imageName = 'tw-agent'
            mainClass = 'io.seqera.tower.agent.Agent'
            configurationFileDirectories.from(file('conf'))
            buildArgs(DefaultNativePlatform.currentOperatingSystem.isLinux() ? ['--static', '--libc=musl'] : [])
            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('-H:+AddAllCharsets')
            buildArgs.add('-H:EnableURLProtocols=https,http')
            buildArgs.add('-H:+ReportExceptionStackTraces')
        }

        test {
            verbose = true
        }
    }
}




